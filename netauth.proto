// This is the master proto for NetAuth.  It contains the RPC
// definitions needed to auth a user as well as to change the state of
// a user's account.

syntax = "proto2";
option go_package = "github.com/netauth/protocol";

// Capabilities permit the holder to perform special actions within
// NetAuth.  This allows the holder to do things related to management
// of the server without needing to use the GLOBAL_ROOT bootstrap
// user.
enum Capability {
  GLOBAL_ROOT = 0;
  CREATE_ENTITY = 10;
  DESTROY_ENTITY = 11;
  MODIFY_ENTITY_META = 12;
  MODIFY_ENTITY_KEYS = 13;
  CHANGE_ENTITY_SECRET = 14;
  LOCK_ENTITY = 15;
  UNLOCK_ENTITY = 16;
  CREATE_GROUP = 20;
  DESTROY_GROUP = 21;
  MODIFY_GROUP_META = 22;
  MODIFY_GROUP_MEMBERS = 23;
}

// Group expansions can either be to include children of the named
// group, or to exclude them.
enum ExpansionMode {
  INCLUDE = 1;
  EXCLUDE = 2;
  DROP = 99;
}

service NetAuth {
  // It is desireable to ping the server for status and health
  rpc Ping(PingRequest) returns (PingResponse) {}

  //////////////////////////////////////////
  // Authentication and secret management //
  //////////////////////////////////////////

  // AuthEntity and GetToken both verify that an entity is who they
  // claim to be (or at least that they posses the identifying
  // information) with the only difference being that GetToken will
  // unsurprisingly return a token on success.
  rpc AuthEntity(NetAuthRequest) returns (SimpleResult) {}
  rpc GetToken(NetAuthRequest) returns (TokenResult) {}
  rpc ValidateToken(NetAuthRequest) returns (SimpleResult) {}
  rpc LockEntity(NetAuthRequest) returns (SimpleResult) {}
  rpc UnlockEntity(NetAuthRequest) returns (SimpleResult) {}

  // ChangeSecret is unusual in that it uses the token if vouching for
  // *another* entity's secret being changed, but if the change is for
  // the requesting entity, the original secret must be provided.
  rpc ChangeSecret(ModEntityRequest) returns (SimpleResult) {}
 
  // AssignCapability assigns or removes capabilities on an entity or
  // a group.
  rpc ManageCapabilities(ModCapabilityRequest) returns (SimpleResult) {}


  ///////////////////////
  // Entity Management //
  ///////////////////////

  // Add and remove Entities
  rpc NewEntity(ModEntityRequest) returns (SimpleResult) {}
  rpc RemoveEntity(ModEntityRequest) returns (SimpleResult) {}

  // Get and set meta information about entities
  rpc EntityInfo(NetAuthRequest) returns (Entity) {}
  rpc ModifyEntityMeta(ModEntityRequest) returns (SimpleResult) {}
  rpc ModifyEntityKeys(ModEntityKeyRequest) returns (KeyList) {}
  rpc ModifyUntypedEntityMeta(ModEntityMetaRequest) returns (UntypedMetaResult) {}
  rpc SearchEntities(SearchRequest) returns (EntityList) {}

  //////////////////////
  // Group Management //
  //////////////////////

  // Add, Remove, and Modify groups
  rpc NewGroup(ModGroupRequest) returns (SimpleResult) {}
  rpc DeleteGroup(ModGroupRequest) returns (SimpleResult) {}
  rpc ModifyGroupMeta(ModGroupRequest) returns (SimpleResult) {}
  rpc GroupInfo(ModGroupRequest) returns (GroupInfoResult) {}
  rpc ModifyUntypedGroupMeta(ModGroupMetaRequest) returns (UntypedMetaResult) {}
  rpc SearchGroups(SearchRequest) returns (GroupList) {}

  // List groups and members
  rpc ListGroups(GroupListRequest) returns (GroupList) {}
  rpc ListGroupMembers(GroupMemberRequest) returns (EntityList) {}

  // Modify direct group membership
  rpc AddEntityToGroup(ModEntityMembershipRequest) returns (SimpleResult) {}
  rpc RemoveEntityFromGroup(ModEntityMembershipRequest) returns (SimpleResult) {}

  // Modify nested group membership
  rpc ModifyGroupNesting(ModGroupNestingRequest) returns (SimpleResult) {}
}

// An AuthRequest includes an Entity and some information to identify
// the system that is making the request.
message NetAuthRequest {
  // The Entity is obviously the most important part of the
  // AuthRequest which is the thing we want to authenticate.
  required Entity Entity = 1;

  optional string AuthToken = 2;

  // Client information for logging
  optional ClientInfo Info = 3;
}

// ModEntityRequests use  an entity  and optionally a  modEntity.  For
// all  requests except  changing  the secret,  the authentication  is
// derived  from the  AuthToken.  In  the  case of  the change  secret
// request the entity may need  to authenticate via secret if changing
// parameters on itself.
message ModEntityRequest {
  // The request must always have an entity, the second entity may not
  // be set in which case the first entity will be acted upon.
  required Entity Entity = 1;

  // This is the entity to act on, it may be set or it may not be.
  optional Entity ModEntity = 2;

  // Client information for logging
  optional ClientInfo Info = 3;

  // The authentication token is used to authorize changes made to the
  // state of things in the NetAuth database.
  required string AuthToken = 4;
}

// Modify the keys for a given entity.  If the caller wishes to just
// list keys in an unauthenticated fashion, pass an empty token.
message ModEntityKeyRequest {
  // The request must have an entity and token to authorize the
  // change, from there it may have a mode, type, and key, but these
  // are not required.
  required Entity Entity = 1;
  required string AuthToken = 2;
  optional ClientInfo Info = 3;

  // Contents for the key change itself
  optional string Mode = 4;
  optional string Type = 5;
  optional string Key = 6;
}

// ModEntityMembershipRequest alters the direct membership of
// entities.  See ModGroupNestingRequest for indirect memberships.
message ModEntityMembershipRequest {
  // The entity in question
  required Entity entity = 1;

  // The group that is being added or removed is taken as a group name
  required Group Group = 3;

  // Client information for logging
  optional ClientInfo Info = 4;

  // The authentication token is used to authorize changes made to the
  // state of things in the NetAuth database.
  required string AuthToken = 5;
}

// ModGroupNestingRequest handles the addition or removal of group
// nesting operations.
message ModGroupNestingRequest {
  // This action must be authorized
  required string AuthToken = 1;

  // There must be a parent and child group for each request.
  required Group ParentGroup = 2;
  required Group ChildGroup = 3;

  // Expansions can either include children or exclude them.  The
  // default is to include.
  optional ExpansionMode Mode = 4;

  // Like other requests this contains info about the caller
  optional ClientInfo Info = 5;
}

// ModCapabilityRequest can alter the capabilities assigned to either
// an entity or group.  If the entity is specified the group will be
// ignored.
message ModCapabilityRequest {
  // This action must be authorized
  required string AuthToken = 1;

  // Either an entity or a group must be specified, if both are
  // specified, the group will be ignored.
  optional Entity Entity = 2;
  optional Group Group = 3;

  // The mode can be either 'ADD' or 'REMOVE'
  required string Mode = 4;

  // And of course, the capability must be specified
  required Capability Capability = 5;

  // Like other requests this contains info about the caller
  optional ClientInfo Info = 6;
}

// ModGroupRequest is used for modifying the a group.  This action can
// only modify some fields on a group, as the name and number are
// immutable after creation.
message ModGroupRequest {
  // The AuthToken for authorization of changes to the database.
  required string AuthToken = 1;

  // The group that's being modified.
  required Group Group = 2;

  // Client information for logging
  optional ClientInfo Info = 3;
}

// A GroupMemberRequest requests the members of a given group.  This
// query is quite expensive and is fairly unoptimized, consider
// carefully if you need to use this in your application.
message GroupMemberRequest {
  // The group for which info is being requested.
  optional Group Group = 1;

  // Client information for logging
  optional ClientInfo Info = 2;
}

// A GroupListRequest summons the listing of groups for the provided
// entity.  Optionally the client may disable indirect lookups, but
// this is not the default due to this causing unintuitive group
// results to be returned.
message GroupListRequest{
  optional ClientInfo Info = 1;
  optional Entity Entity = 2;
  optional bool IncludeIndirects = 3 [default=true];
}

// A ModEntityMetaRequest includes the metadata needed to modify the
// untyped key/value store on an entity.
message ModEntityMetaRequest {
  // The request must always have an entity, the second entity may not
  // be set in which case the first entity will be acted upon.
  required Entity Entity = 1;

  // Parameters needed to manage untyped metadata
  required string Mode = 2;
  required string Key = 3;
  optional string Value = 4;

  // Client information for logging
  optional ClientInfo Info = 5;

  // The authentication token is used to authorize changes made to the
  // state of things in the NetAuth database.
  required string AuthToken = 6;
}

// A ModGroupMetaRequest includes the metadata needed to modify the
// untyped key/value store on an entity.
message ModGroupMetaRequest {
  // The request must always have an entity, the second entity may not
  // be set in which case the first entity will be acted upon.
  required Group Group = 1;

  // Parameters needed to manage untyped metadata
  required string Mode = 2;
  required string Key = 3;
  optional string Value = 4;

  // Client information for logging
  optional ClientInfo Info = 5;

  // The authentication token is used to authorize changes made to the
  // state of things in the NetAuth database.
  required string AuthToken = 6;
}

// A SearchRequest contains a search expression, and the standard
// client info struct.
message SearchRequest {
  optional string expression = 1;
  optional ClientInfo Info = 2;
}

// A SimpleResult can be returned from most services and explains
// whether or not the service completed successfully or not, and an
// optional message that may explain in more detail.
message SimpleResult {
  // Required is forever, but a SimpleResult without a success state
  // doesn't mean much.  This field must be present in all replies.
  required bool success = 1 [default = false];

  // In the failure case a message may be provided detailing the
  // failure.  This message must not contain secure information and
  // there must be an expectation that anything placed in this field
  // will be shown directly to a person or written to a log.
  optional string msg = 2;
}

// A token reply will include the status of the authentication
// request, and if successful, an authentication token that can be
// used for future requests.
message TokenResult {
  // Success will provide a high level status of if the reply
  // succeeded.
  required bool success = 1 [default = false];

  // Msg contains information about a failure if applicable.
  optional string Msg = 2;

  // Token contains the token if the request was successful or is
  // empty otherwise.
  optional string Token = 3;
}

// A KeyList is a list of keys.
message KeyList {
  repeated string Keys = 1;
}

// A GroupList contains a literal list of groups, such as returned by
// a search function.
message GroupList {
  repeated Group Groups = 1;
}

// A GroupInfoResult contains exactly one group, and for convenience a
// list of groups that this group manages.
message GroupInfoResult {
  required Group Group = 1;
  repeated string Managed = 2;
}

// GroupMemberList is returned when a query generates a list of
// entities.
message EntityList {
  repeated Entity Members = 1;
}

// UntypedMetaResponse contains a repeated string field which is
// converted to a map on the client side.
message UntypedMetaResult {
  repeated string UntypedMeta = 1;
}

// The PingRequest is used to ask the server to return its health
// status to the requestor.
message PingRequest {
  // Client information for logging
  optional ClientInfo Info = 1;
}


// The PingReply is used to tell the client if this server is healthy
// and ready to serve.
message PingResponse {
  // The server will reply healthy=True if it is ready to serve.
  optional bool Healthy = 1;

  // Optionally the server may have a message if it is not healthy.
  optional string Msg = 2;
}

// An entity may be a person or a machine actor that wishes to act as
// some identity.  To do so they will need to transmit an ID and a
// secret which will be used to verify that they are who they say they
// are.
message Entity {
  // The entity may be identified by a string.  This is most common
  // for the initial authentication case where a people-entity has
  // typed a name in and now wishes to be authenticated.
  optional string ID = 1;

  // An entity might also be identified by a unique ID number.  This
  // case is most common when some program wishes to get information
  // about an entity.
  optional int32 Number = 2;

  // The entity may have a secret which they will use to authenticate
  // themselves.
  optional string secret = 3;

  // For requests that update the meta information this must be
  // attatched to the entity itself.  This also allows the in-memory
  // format to be defined by this proto.
  optional EntityMeta meta = 4;
}

// The EntityMeta structure contains additional information about the
// entity in question.  This is the "directory" part of NetAuth's
// ecosystem and contains information you might want to know about an
// entity.
message EntityMeta {
  // The primary group ID for the entity.  On most UNIX systems this
  // will map to a group with the same string representation as the
  // Entity, but it is not uncommon for people-entities in a network
  // environment to not have a personal primary group and instead
  // belong to an organization wide primary group.
  optional string PrimaryGroup = 1;

  // This is an arbitrary field used to store things like the user's
  // real name.  It is here for consistency, but the name displayed by
  // the user should really be stored in displayName, with the actual
  // name stored in legalName (this facilitates a user to have an
  // arbitrary name displayed if this is permitted by local policy).
  optional string GECOS = 2;

  // This stores the legal name (if used) that owns this security
  // entity.  This primarily here for places where knowing the single
  // owning entity is a requirement for compliance reasons.
  optional string LegalName = 3;

  // This field is for the display value of the legalName.  This lets
  // the displayed value fluctuate with no connection to the actual
  // identity of the owning entity.
  optional string DisplayName = 4;

  // Given that the entity identity and auth are provided by the
  // network, its not unlikely that the home directory for the entity
  // is as well.  This string contains the fully qualified path to the
  // home directory.
  optional string Home = 5;

  // This string is the canonical 'user command interpreter' specified
  // in the passwd file.  This value provided by this field must be
  // safe to use on all target systems as setting this to something
  // that doesn't exist on the targets will cause the login program to
  // abort when setting up the environment.
  optional string Shell = 6;

  // This is for the graphical shell, primarily for when the entity is
  // a person (though machine entities might also need to have a
  // graphical shell set).  This provides a handy place to store it,
  // but unfortunately a seperate mechanism is needed to get this into
  // the systems that actually setup the graphical environment.
  optional string GraphicalShell = 7;

  // Person entities may have a physical badge which gets them access
  // to things, and machine entities may have an asset tag which is
  // nice to keep track of.  This is a string rather than a number
  // because the badge "number" might actually be a UUID or something
  // that is not otherwise a pure number.
  optional string BadgeNumber = 8;

  // An entity can be locked such that they cannot authenticate at
  // all.  This instructs the server to refuse authentication attempts
  // before considering the secret (if provided).
  optional bool Locked = 9;

  // Entities may be direct members of groups
  repeated string Groups = 250;

  // Entities may have capabilities that provide special actions to
  // the holder within NetAuth.
  repeated Capability Capabilities = 251;

  // Entities may also have one or more Keys associated with them.
  // This is deliberately untyped to allow it to be TYPE:KEY rather
  // than needing a protocol update every time a new type of key
  // should be stored.
  repeated string Keys = 252;

  // While NetAuth isn't a general purpose directory, it will
  // undoubtedly be abused in that way.  To make this somewhat more
  // palatable, a generic K/V field is included.
  repeated string UntypedMeta = 253;
}

// While machine entities may belong to only one group, people
// entities often belong to many groups at once.  This message
// structures the reply for the additional groups.
message Group {
  // A group name must satisfy the requirements of the UNIX group
  // naming conventions.  This should be one word, lower case, with no
  // spaces and cannot begin with a number.
  optional string Name = 1;

  // Since the name has strict naming requirements, its nice to have a
  // displayName for the group which has a more friendly display.
  // Instead of trying to reason out what naacct means, its much nicer
  // to just know that its "Accounting team - North America"
  optional string DisplayName = 2;

  // On *nix systems the group should also have a number.  This number
  // should be the same across all systems since it may be used for
  // internal matching of users.
  optional int32 Number = 3;

  // Groups can be managed by other groups.  For a group to be self
  // managed, one would set the managed by group to be the group
  // itself.
  optional string ManagedBy = 5;

  // Groups may have capabilities that are conferred to members of the
  // group on a membership basis.  This is the preferred way of
  // granting capabilities to an entity since it means that when an
  // entity is removed from the group they lose the capabilities that
  // were granted from it.
  repeated Capability Capabilities = 50;

  // Groups can also be members of other groups.  This allows a group
  // to appear to contain a larger membership and build this
  // membership based on potentially very intricate include/exclude
  // rules.  The format of this field is "<mode>:<group>" so if you
  // were including the membership of 'foo', then it would have the
  // value of "INCLUDE:foo".
  repeated string Expansions = 51;

  // While NetAuth isn't a general purpose directory, it will
  // undoubtedly be abused in that way.  To make this somewhat more
  // palatable, a generic K/V field is included.
  repeated string UntypedMeta = 100;
}

// The ClientInfo message contains information about the client
// originating the request.  This information must not be used for
// security functions of any kind, as it is directly editable by the
// client.
message ClientInfo {
  // The ID is to be used to define the originating client, this
  // should in general be set to the client's hostname, or otherwise
  // some persistent system identifier.
  optional string ID = 1;

  // The Service is an identifier that defined what is asking the
  // system for information.  This should usually be set to the
  // application name, or 'SYSTEM' if the request is on behalf of the
  // system itself.
  optional string Service = 2;
}
