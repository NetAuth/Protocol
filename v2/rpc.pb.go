// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v2/rpc.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	v2/rpc.proto

It has these top-level messages:
	EntityRequest
	GroupRequest
	KVRequest
	ListOfEntities
	ListOfGroups
	ListOfStrings
	AuthRequest
	AuthResult
	SubSystemStatus
	ServerStatus
	CapabilityRequest
	GroupRulesRequest
	Empty
	SearchRequest
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import netauth "github.com/netauth/protocol"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_ADD        Action = 1
	Action_DROP       Action = 2
	Action_UPSERT     Action = 3
	Action_CLEAREXACT Action = 4
	Action_CLEARFUZZY Action = 5
	Action_READ       Action = 6
)

var Action_name = map[int32]string{
	1: "ADD",
	2: "DROP",
	3: "UPSERT",
	4: "CLEAREXACT",
	5: "CLEARFUZZY",
	6: "READ",
}
var Action_value = map[string]int32{
	"ADD":        1,
	"DROP":       2,
	"UPSERT":     3,
	"CLEAREXACT": 4,
	"CLEARFUZZY": 5,
	"READ":       6,
}

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}
func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (x *Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Action_value, data, "Action")
	if err != nil {
		return err
	}
	*x = Action(value)
	return nil
}
func (Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RuleAction int32

const (
	RuleAction_INCLUDE     RuleAction = 1
	RuleAction_EXCLUDE     RuleAction = 2
	RuleAction_REMOVE_RULE RuleAction = 99
)

var RuleAction_name = map[int32]string{
	1:  "INCLUDE",
	2:  "EXCLUDE",
	99: "REMOVE_RULE",
}
var RuleAction_value = map[string]int32{
	"INCLUDE":     1,
	"EXCLUDE":     2,
	"REMOVE_RULE": 99,
}

func (x RuleAction) Enum() *RuleAction {
	p := new(RuleAction)
	*p = x
	return p
}
func (x RuleAction) String() string {
	return proto.EnumName(RuleAction_name, int32(x))
}
func (x *RuleAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuleAction_value, data, "RuleAction")
	if err != nil {
		return err
	}
	*x = RuleAction(value)
	return nil
}
func (RuleAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EntityRequest struct {
	Entity           *netauth.Entity `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	Data             *netauth.Entity `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *EntityRequest) Reset()                    { *m = EntityRequest{} }
func (m *EntityRequest) String() string            { return proto.CompactTextString(m) }
func (*EntityRequest) ProtoMessage()               {}
func (*EntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EntityRequest) GetEntity() *netauth.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *EntityRequest) GetData() *netauth.Entity {
	if m != nil {
		return m.Data
	}
	return nil
}

type GroupRequest struct {
	Group            *netauth.Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Data             *netauth.Group `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupRequest) GetGroup() *netauth.Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupRequest) GetData() *netauth.Group {
	if m != nil {
		return m.Data
	}
	return nil
}

type KVRequest struct {
	Target           *string `protobuf:"bytes,1,opt,name=Target" json:"Target,omitempty"`
	Action           *Action `protobuf:"varint,2,opt,name=Action,enum=netauth.v2.Action" json:"Action,omitempty"`
	Key              *string `protobuf:"bytes,3,opt,name=Key" json:"Key,omitempty"`
	Value            *string `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KVRequest) Reset()                    { *m = KVRequest{} }
func (m *KVRequest) String() string            { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()               {}
func (*KVRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KVRequest) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func (m *KVRequest) GetAction() Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Action_ADD
}

func (m *KVRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KVRequest) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ListOfEntities struct {
	Entities         []*netauth.Entity `protobuf:"bytes,1,rep,name=Entities" json:"Entities,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ListOfEntities) Reset()                    { *m = ListOfEntities{} }
func (m *ListOfEntities) String() string            { return proto.CompactTextString(m) }
func (*ListOfEntities) ProtoMessage()               {}
func (*ListOfEntities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListOfEntities) GetEntities() []*netauth.Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type ListOfGroups struct {
	Groups           []*netauth.Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ListOfGroups) Reset()                    { *m = ListOfGroups{} }
func (m *ListOfGroups) String() string            { return proto.CompactTextString(m) }
func (*ListOfGroups) ProtoMessage()               {}
func (*ListOfGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListOfGroups) GetGroups() []*netauth.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ListOfStrings struct {
	Strings          []string `protobuf:"bytes,1,rep,name=Strings" json:"Strings,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListOfStrings) Reset()                    { *m = ListOfStrings{} }
func (m *ListOfStrings) String() string            { return proto.CompactTextString(m) }
func (*ListOfStrings) ProtoMessage()               {}
func (*ListOfStrings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListOfStrings) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

type AuthRequest struct {
	Entity           *netauth.Entity `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	Secret           *string         `protobuf:"bytes,2,opt,name=Secret" json:"Secret,omitempty"`
	Token            *string         `protobuf:"bytes,98,opt,name=Token" json:"Token,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AuthRequest) GetEntity() *netauth.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *AuthRequest) GetSecret() string {
	if m != nil && m.Secret != nil {
		return *m.Secret
	}
	return ""
}

func (m *AuthRequest) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AuthResult struct {
	Token            *string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthResult) Reset()                    { *m = AuthResult{} }
func (m *AuthResult) String() string            { return proto.CompactTextString(m) }
func (*AuthResult) ProtoMessage()               {}
func (*AuthResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AuthResult) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type SubSystemStatus struct {
	Name             *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	OK               *bool   `protobuf:"varint,2,opt,name=OK" json:"OK,omitempty"`
	FaultMessage     *string `protobuf:"bytes,3,opt,name=FaultMessage" json:"FaultMessage,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubSystemStatus) Reset()                    { *m = SubSystemStatus{} }
func (m *SubSystemStatus) String() string            { return proto.CompactTextString(m) }
func (*SubSystemStatus) ProtoMessage()               {}
func (*SubSystemStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SubSystemStatus) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SubSystemStatus) GetOK() bool {
	if m != nil && m.OK != nil {
		return *m.OK
	}
	return false
}

func (m *SubSystemStatus) GetFaultMessage() string {
	if m != nil && m.FaultMessage != nil {
		return *m.FaultMessage
	}
	return ""
}

type ServerStatus struct {
	SystemOK         *bool              `protobuf:"varint,1,opt,name=SystemOK" json:"SystemOK,omitempty"`
	FirstFailure     *SubSystemStatus   `protobuf:"bytes,2,opt,name=FirstFailure" json:"FirstFailure,omitempty"`
	SubSystems       []*SubSystemStatus `protobuf:"bytes,3,rep,name=SubSystems" json:"SubSystems,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ServerStatus) Reset()                    { *m = ServerStatus{} }
func (m *ServerStatus) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()               {}
func (*ServerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ServerStatus) GetSystemOK() bool {
	if m != nil && m.SystemOK != nil {
		return *m.SystemOK
	}
	return false
}

func (m *ServerStatus) GetFirstFailure() *SubSystemStatus {
	if m != nil {
		return m.FirstFailure
	}
	return nil
}

func (m *ServerStatus) GetSubSystems() []*SubSystemStatus {
	if m != nil {
		return m.SubSystems
	}
	return nil
}

type CapabilityRequest struct {
	Capability       *netauth.Capability `protobuf:"varint,1,opt,name=Capability,enum=Capability" json:"Capability,omitempty"`
	Direct           *bool               `protobuf:"varint,2,opt,name=Direct" json:"Direct,omitempty"`
	Target           *string             `protobuf:"bytes,3,opt,name=Target" json:"Target,omitempty"`
	Action           *Action             `protobuf:"varint,4,opt,name=Action,enum=netauth.v2.Action" json:"Action,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CapabilityRequest) Reset()                    { *m = CapabilityRequest{} }
func (m *CapabilityRequest) String() string            { return proto.CompactTextString(m) }
func (*CapabilityRequest) ProtoMessage()               {}
func (*CapabilityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CapabilityRequest) GetCapability() netauth.Capability {
	if m != nil && m.Capability != nil {
		return *m.Capability
	}
	return netauth.Capability_GLOBAL_ROOT
}

func (m *CapabilityRequest) GetDirect() bool {
	if m != nil && m.Direct != nil {
		return *m.Direct
	}
	return false
}

func (m *CapabilityRequest) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func (m *CapabilityRequest) GetAction() Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Action_ADD
}

type GroupRulesRequest struct {
	Group            *netauth.Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Target           *netauth.Group `protobuf:"bytes,2,opt,name=Target" json:"Target,omitempty"`
	RuleAction       *RuleAction    `protobuf:"varint,3,opt,name=RuleAction,enum=netauth.v2.RuleAction" json:"RuleAction,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GroupRulesRequest) Reset()                    { *m = GroupRulesRequest{} }
func (m *GroupRulesRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRulesRequest) ProtoMessage()               {}
func (*GroupRulesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GroupRulesRequest) GetGroup() *netauth.Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupRulesRequest) GetTarget() *netauth.Group {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GroupRulesRequest) GetRuleAction() RuleAction {
	if m != nil && m.RuleAction != nil {
		return *m.RuleAction
	}
	return RuleAction_INCLUDE
}

// Some RPC commands return no result, instead the only return
// information required is the status code which is returned in a
// parallel channel via gRPC magic.  This message serves that function
// by being explicitly empty.
type Empty struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// A SearchRequest contains a search expression, and the standard
// client info struct.
type SearchRequest struct {
	Expression       *string `protobuf:"bytes,1,opt,name=expression" json:"expression,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchRequest) GetExpression() string {
	if m != nil && m.Expression != nil {
		return *m.Expression
	}
	return ""
}

func init() {
	proto.RegisterType((*EntityRequest)(nil), "netauth.v2.EntityRequest")
	proto.RegisterType((*GroupRequest)(nil), "netauth.v2.GroupRequest")
	proto.RegisterType((*KVRequest)(nil), "netauth.v2.KVRequest")
	proto.RegisterType((*ListOfEntities)(nil), "netauth.v2.ListOfEntities")
	proto.RegisterType((*ListOfGroups)(nil), "netauth.v2.ListOfGroups")
	proto.RegisterType((*ListOfStrings)(nil), "netauth.v2.ListOfStrings")
	proto.RegisterType((*AuthRequest)(nil), "netauth.v2.AuthRequest")
	proto.RegisterType((*AuthResult)(nil), "netauth.v2.AuthResult")
	proto.RegisterType((*SubSystemStatus)(nil), "netauth.v2.SubSystemStatus")
	proto.RegisterType((*ServerStatus)(nil), "netauth.v2.ServerStatus")
	proto.RegisterType((*CapabilityRequest)(nil), "netauth.v2.CapabilityRequest")
	proto.RegisterType((*GroupRulesRequest)(nil), "netauth.v2.GroupRulesRequest")
	proto.RegisterType((*Empty)(nil), "netauth.v2.Empty")
	proto.RegisterType((*SearchRequest)(nil), "netauth.v2.SearchRequest")
	proto.RegisterEnum("netauth.v2.Action", Action_name, Action_value)
	proto.RegisterEnum("netauth.v2.RuleAction", RuleAction_name, RuleAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetAuth2 service

type NetAuth2Client interface {
	EntityCreate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityUpdate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityInfo(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	EntitySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	EntityUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	EntityKeys(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	EntityDestroy(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityLock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityUnlock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityGroups(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	AuthEntity(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	AuthGetToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error)
	AuthValidateToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	AuthChangeSecret(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupCreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupUpdate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupInfo(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	GroupUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	GroupUpdateRules(ctx context.Context, in *GroupRulesRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupAddMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupDelMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupDestroy(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupMembers(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	GroupSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	SystemCapabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*Empty, error)
	SystemPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SystemStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerStatus, error)
}

type netAuth2Client struct {
	cc *grpc.ClientConn
}

func NewNetAuth2Client(cc *grpc.ClientConn) NetAuth2Client {
	return &netAuth2Client{cc}
}

func (c *netAuth2Client) EntityCreate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUpdate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityInfo(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntitySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntitySearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKeys(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityDestroy(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityDestroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityLock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUnlock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUnlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityGroups(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthEntity(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthGetToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error) {
	out := new(AuthResult)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthGetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthValidateToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthChangeSecret(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthChangeSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupCreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUpdate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupInfo(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUpdateRules(ctx context.Context, in *GroupRulesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUpdateRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupAddMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupAddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupDelMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupDelMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupDestroy(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupDestroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupMembers(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemCapabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := grpc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetAuth2 service

type NetAuth2Server interface {
	EntityCreate(context.Context, *EntityRequest) (*Empty, error)
	EntityUpdate(context.Context, *EntityRequest) (*Empty, error)
	EntityInfo(context.Context, *EntityRequest) (*ListOfEntities, error)
	EntitySearch(context.Context, *SearchRequest) (*ListOfEntities, error)
	EntityUM(context.Context, *KVRequest) (*ListOfStrings, error)
	EntityKeys(context.Context, *KVRequest) (*ListOfStrings, error)
	EntityDestroy(context.Context, *EntityRequest) (*Empty, error)
	EntityLock(context.Context, *EntityRequest) (*Empty, error)
	EntityUnlock(context.Context, *EntityRequest) (*Empty, error)
	EntityGroups(context.Context, *EntityRequest) (*ListOfGroups, error)
	AuthEntity(context.Context, *AuthRequest) (*Empty, error)
	AuthGetToken(context.Context, *AuthRequest) (*AuthResult, error)
	AuthValidateToken(context.Context, *AuthRequest) (*Empty, error)
	AuthChangeSecret(context.Context, *AuthRequest) (*Empty, error)
	GroupCreate(context.Context, *GroupRequest) (*Empty, error)
	GroupUpdate(context.Context, *GroupRequest) (*Empty, error)
	GroupInfo(context.Context, *GroupRequest) (*ListOfGroups, error)
	GroupUM(context.Context, *KVRequest) (*ListOfStrings, error)
	GroupUpdateRules(context.Context, *GroupRulesRequest) (*Empty, error)
	GroupAddMember(context.Context, *EntityRequest) (*Empty, error)
	GroupDelMember(context.Context, *EntityRequest) (*Empty, error)
	GroupDestroy(context.Context, *GroupRequest) (*Empty, error)
	GroupMembers(context.Context, *GroupRequest) (*ListOfEntities, error)
	GroupSearch(context.Context, *SearchRequest) (*ListOfGroups, error)
	SystemCapabilities(context.Context, *CapabilityRequest) (*Empty, error)
	SystemPing(context.Context, *Empty) (*Empty, error)
	SystemStatus(context.Context, *Empty) (*ServerStatus, error)
}

func RegisterNetAuth2Server(s *grpc.Server, srv NetAuth2Server) {
	s.RegisterService(&_NetAuth2_serviceDesc, srv)
}

func _NetAuth2_EntityCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityCreate(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUpdate(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityInfo(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntitySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntitySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntitySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntitySearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUM(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKeys(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityDestroy(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityLock(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUnlock(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityGroups(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthEntity(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthGetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthGetToken(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthValidateToken(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthChangeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthChangeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthChangeSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthChangeSecret(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupCreate(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUpdate(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupInfo(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUM(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUpdateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUpdateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUpdateRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUpdateRules(ctx, req.(*GroupRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupAddMember(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupDelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupDelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupDelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupDelMember(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupDestroy(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupMembers(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemCapabilities(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemPing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetAuth2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netauth.v2.NetAuth2",
	HandlerType: (*NetAuth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EntityCreate",
			Handler:    _NetAuth2_EntityCreate_Handler,
		},
		{
			MethodName: "EntityUpdate",
			Handler:    _NetAuth2_EntityUpdate_Handler,
		},
		{
			MethodName: "EntityInfo",
			Handler:    _NetAuth2_EntityInfo_Handler,
		},
		{
			MethodName: "EntitySearch",
			Handler:    _NetAuth2_EntitySearch_Handler,
		},
		{
			MethodName: "EntityUM",
			Handler:    _NetAuth2_EntityUM_Handler,
		},
		{
			MethodName: "EntityKeys",
			Handler:    _NetAuth2_EntityKeys_Handler,
		},
		{
			MethodName: "EntityDestroy",
			Handler:    _NetAuth2_EntityDestroy_Handler,
		},
		{
			MethodName: "EntityLock",
			Handler:    _NetAuth2_EntityLock_Handler,
		},
		{
			MethodName: "EntityUnlock",
			Handler:    _NetAuth2_EntityUnlock_Handler,
		},
		{
			MethodName: "EntityGroups",
			Handler:    _NetAuth2_EntityGroups_Handler,
		},
		{
			MethodName: "AuthEntity",
			Handler:    _NetAuth2_AuthEntity_Handler,
		},
		{
			MethodName: "AuthGetToken",
			Handler:    _NetAuth2_AuthGetToken_Handler,
		},
		{
			MethodName: "AuthValidateToken",
			Handler:    _NetAuth2_AuthValidateToken_Handler,
		},
		{
			MethodName: "AuthChangeSecret",
			Handler:    _NetAuth2_AuthChangeSecret_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _NetAuth2_GroupCreate_Handler,
		},
		{
			MethodName: "GroupUpdate",
			Handler:    _NetAuth2_GroupUpdate_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _NetAuth2_GroupInfo_Handler,
		},
		{
			MethodName: "GroupUM",
			Handler:    _NetAuth2_GroupUM_Handler,
		},
		{
			MethodName: "GroupUpdateRules",
			Handler:    _NetAuth2_GroupUpdateRules_Handler,
		},
		{
			MethodName: "GroupAddMember",
			Handler:    _NetAuth2_GroupAddMember_Handler,
		},
		{
			MethodName: "GroupDelMember",
			Handler:    _NetAuth2_GroupDelMember_Handler,
		},
		{
			MethodName: "GroupDestroy",
			Handler:    _NetAuth2_GroupDestroy_Handler,
		},
		{
			MethodName: "GroupMembers",
			Handler:    _NetAuth2_GroupMembers_Handler,
		},
		{
			MethodName: "GroupSearch",
			Handler:    _NetAuth2_GroupSearch_Handler,
		},
		{
			MethodName: "SystemCapabilities",
			Handler:    _NetAuth2_SystemCapabilities_Handler,
		},
		{
			MethodName: "SystemPing",
			Handler:    _NetAuth2_SystemPing_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _NetAuth2_SystemStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/rpc.proto",
}

func init() { proto.RegisterFile("v2/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xeb, 0x6e, 0xe2, 0xc6,
	0x17, 0xe7, 0x16, 0x2e, 0x87, 0xcb, 0x3a, 0xa3, 0xff, 0x3f, 0xf5, 0xb2, 0x6d, 0x1a, 0xb9, 0x5f,
	0xda, 0x54, 0x02, 0x09, 0xf5, 0x22, 0xb5, 0x7b, 0xa3, 0xd8, 0x64, 0x57, 0x40, 0x48, 0x4d, 0x88,
	0x76, 0xa3, 0x4a, 0x95, 0x71, 0x66, 0x89, 0xb5, 0xc6, 0xa6, 0x9e, 0x71, 0x5a, 0x1e, 0xa1, 0xef,
	0xd0, 0x07, 0xe8, 0x43, 0xf6, 0x43, 0xe5, 0x99, 0x31, 0x8c, 0x97, 0x40, 0x16, 0xfa, 0x6d, 0xce,
	0x9c, 0xf3, 0xfb, 0xf9, 0x9c, 0x39, 0x97, 0x19, 0x43, 0xe5, 0xae, 0xd5, 0x0c, 0xe6, 0x76, 0x63,
	0x1e, 0xf8, 0xd4, 0x47, 0xe0, 0x61, 0x6a, 0x85, 0xf4, 0xb6, 0x71, 0xd7, 0xaa, 0x57, 0xe3, 0x35,
	0x53, 0x69, 0x03, 0xa8, 0x1a, 0x1e, 0x75, 0xe8, 0xc2, 0xc4, 0xbf, 0x85, 0x98, 0x50, 0xf4, 0x39,
	0xe4, 0xf9, 0x86, 0x9a, 0x3e, 0x49, 0x7f, 0x59, 0x6e, 0x15, 0x1a, 0x42, 0x2f, 0xb6, 0xd1, 0x13,
	0xc8, 0xe9, 0x16, 0xb5, 0xd4, 0x4c, 0x52, 0xcd, 0x36, 0xb5, 0x57, 0x50, 0x39, 0x0b, 0xfc, 0x70,
	0x1e, 0xb3, 0x7d, 0x0a, 0x07, 0x4c, 0x16, 0x64, 0xf9, 0x06, 0xd7, 0xf2, 0x4d, 0x54, 0x4f, 0x50,
	0xc5, 0x4a, 0xce, 0xf4, 0x3b, 0x94, 0x7a, 0x57, 0x31, 0xcd, 0x11, 0xe4, 0x2f, 0xad, 0x60, 0x8a,
	0x29, 0xe3, 0x29, 0x99, 0x42, 0x42, 0xa7, 0x90, 0x6f, 0xdb, 0xd4, 0xf1, 0x3d, 0x46, 0x51, 0x6b,
	0xa1, 0xc6, 0x2a, 0xd2, 0x06, 0xd7, 0x98, 0xc2, 0x02, 0x29, 0x90, 0xed, 0xe1, 0x85, 0x9a, 0x65,
	0x04, 0xd1, 0x12, 0xfd, 0x0f, 0x0e, 0xae, 0x2c, 0x37, 0xc4, 0x6a, 0x8e, 0xed, 0x71, 0x41, 0xfb,
	0x16, 0x6a, 0x7d, 0x87, 0xd0, 0xe1, 0x3b, 0x16, 0x98, 0x83, 0x09, 0xfa, 0x02, 0x8a, 0xf1, 0x5a,
	0x4d, 0x9f, 0x64, 0xe5, 0xa8, 0x97, 0x0a, 0xad, 0x01, 0x15, 0x0e, 0x63, 0x41, 0x10, 0x74, 0x0c,
	0x79, 0xbe, 0x12, 0x90, 0x38, 0x3a, 0xb1, 0xab, 0x7d, 0x05, 0x55, 0x6e, 0x3f, 0xa2, 0x81, 0xe3,
	0x4d, 0x09, 0x52, 0xa1, 0x20, 0x96, 0x0c, 0x51, 0x32, 0x63, 0x51, 0xfb, 0x05, 0xca, 0xed, 0x90,
	0xde, 0x7e, 0x74, 0x86, 0x8e, 0x20, 0x3f, 0xc2, 0x76, 0x80, 0x29, 0x3b, 0x95, 0x92, 0x29, 0xa4,
	0x28, 0xde, 0x4b, 0xff, 0x3d, 0xf6, 0xd4, 0x09, 0x8f, 0x97, 0x09, 0x9a, 0x06, 0xc0, 0xd9, 0x49,
	0xe8, 0x4a, 0x36, 0x69, 0xd9, 0xe6, 0x2d, 0x3c, 0x1a, 0x85, 0x93, 0xd1, 0x82, 0x50, 0x3c, 0x1b,
	0x51, 0x8b, 0x86, 0x04, 0x21, 0xc8, 0x9d, 0x5b, 0x33, 0x2c, 0xec, 0xd8, 0x1a, 0xd5, 0x20, 0x33,
	0xec, 0xb1, 0x8f, 0x16, 0xcd, 0xcc, 0xb0, 0x87, 0x34, 0xa8, 0x74, 0xad, 0xd0, 0xa5, 0x03, 0x4c,
	0x88, 0x35, 0xc5, 0xe2, 0xec, 0x13, 0x7b, 0xda, 0xdf, 0x69, 0xa8, 0x8c, 0x70, 0x70, 0x87, 0x03,
	0x41, 0x5c, 0x87, 0x22, 0xff, 0xd0, 0xb0, 0xc7, 0xc8, 0x8b, 0xe6, 0x52, 0x46, 0x2f, 0xa0, 0xd2,
	0x75, 0x02, 0x42, 0xbb, 0x96, 0xe3, 0x86, 0x01, 0x16, 0x85, 0xf3, 0x44, 0xce, 0xfa, 0x07, 0x7e,
	0x9a, 0x09, 0x00, 0xfa, 0x11, 0x60, 0x69, 0x40, 0xd4, 0x2c, 0xcb, 0xcc, 0x56, 0xb8, 0x64, 0xae,
	0xfd, 0x95, 0x86, 0xc3, 0x8e, 0x35, 0xb7, 0x26, 0x8e, 0x2b, 0x35, 0xcc, 0xd7, 0x00, 0xab, 0x4d,
	0xe6, 0x71, 0xad, 0x55, 0x6e, 0x48, 0x76, 0x92, 0x3a, 0x4a, 0x8d, 0xee, 0x04, 0xd8, 0xa6, 0xe2,
	0x94, 0x84, 0x24, 0x15, 0x78, 0x76, 0x43, 0x81, 0xe7, 0x1e, 0x2a, 0x70, 0xed, 0xcf, 0x34, 0x1c,
	0xf2, 0x1a, 0x0b, 0x5d, 0x4c, 0x3e, 0xae, 0x03, 0x8f, 0x97, 0xdf, 0x4d, 0xf6, 0x60, 0xfc, 0xfd,
	0xef, 0x00, 0x22, 0x36, 0xe1, 0x43, 0x96, 0xf9, 0x70, 0x24, 0xfb, 0xb0, 0xd2, 0x9a, 0x92, 0xa5,
	0x56, 0x80, 0x03, 0x63, 0x36, 0xa7, 0x0b, 0xad, 0x09, 0xd5, 0x11, 0xb6, 0x02, 0x7b, 0x59, 0xbd,
	0xc7, 0x00, 0xf8, 0x8f, 0x79, 0x80, 0x09, 0x89, 0x18, 0x79, 0xf5, 0x48, 0x3b, 0xa7, 0x3f, 0xc7,
	0x11, 0xa3, 0x02, 0x64, 0xdb, 0xba, 0xae, 0xa4, 0x51, 0x11, 0x72, 0xba, 0x39, 0xbc, 0x50, 0x32,
	0x08, 0x20, 0x3f, 0xbe, 0x18, 0x19, 0xe6, 0xa5, 0x92, 0x45, 0x35, 0x80, 0x4e, 0xdf, 0x68, 0x9b,
	0xc6, 0x9b, 0x76, 0xe7, 0x52, 0xc9, 0x2d, 0xe5, 0xee, 0xf8, 0xfa, 0xfa, 0xad, 0x72, 0x10, 0xa1,
	0x4c, 0xa3, 0xad, 0x2b, 0xf9, 0xd3, 0xef, 0xe5, 0x20, 0x50, 0x19, 0x0a, 0xaf, 0xcf, 0x3b, 0xfd,
	0xb1, 0x6e, 0x28, 0xe9, 0x48, 0x30, 0xde, 0x70, 0x21, 0x83, 0x1e, 0x41, 0xd9, 0x34, 0x06, 0xc3,
	0x2b, 0xe3, 0x57, 0x73, 0xdc, 0x37, 0x14, 0xbb, 0xf5, 0x4f, 0x15, 0x8a, 0xe7, 0x98, 0x46, 0xed,
	0xd1, 0x42, 0xcf, 0xa1, 0xc2, 0xfb, 0xab, 0x13, 0x60, 0x8b, 0x62, 0xf4, 0x58, 0x3e, 0x86, 0xc4,
	0x0c, 0xad, 0x1f, 0x26, 0x54, 0xec, 0x1c, 0x52, 0x2b, 0xfc, 0x78, 0x7e, 0xb3, 0x0f, 0xde, 0x00,
	0xe0, 0x56, 0xaf, 0xbd, 0x77, 0xfe, 0x36, 0x74, 0x5d, 0x56, 0x25, 0x47, 0x99, 0x96, 0x42, 0x67,
	0xb1, 0x1b, 0x3c, 0x2d, 0x49, 0xa2, 0x44, 0xaa, 0x1e, 0x20, 0x7a, 0x2e, 0xa6, 0xe2, 0x62, 0x3c,
	0x40, 0xff, 0x97, 0x2d, 0x97, 0x63, 0xbb, 0xfe, 0x78, 0x9d, 0x20, 0x9e, 0x69, 0x29, 0xf4, 0x32,
	0x8e, 0xa7, 0x87, 0x17, 0x64, 0x2f, 0x86, 0x17, 0xf1, 0xdd, 0xa5, 0x63, 0x42, 0x03, 0x7f, 0xb1,
	0xf3, 0x91, 0x3e, 0x8d, 0x5d, 0xe8, 0xfb, 0xf6, 0xfb, 0xff, 0x90, 0x50, 0xcf, 0xdd, 0x07, 0x6f,
	0xc4, 0x78, 0x71, 0x63, 0x6c, 0xc1, 0xab, 0xeb, 0xc7, 0x20, 0xae, 0x91, 0x14, 0xfa, 0x81, 0xcf,
	0x6f, 0x31, 0xfb, 0x3f, 0x49, 0x0c, 0x88, 0xd5, 0xad, 0x71, 0xbf, 0x0b, 0x6d, 0xa8, 0x44, 0x36,
	0x67, 0x98, 0xb2, 0x39, 0xbf, 0x19, 0x7d, 0xb4, 0xae, 0x88, 0xae, 0x0b, 0x46, 0x71, 0x18, 0xc9,
	0x57, 0x96, 0xeb, 0x44, 0x65, 0xfd, 0x00, 0xcf, 0xbd, 0x5e, 0xbc, 0x04, 0x25, 0xb2, 0xe9, 0xdc,
	0x5a, 0xde, 0x14, 0x8b, 0xbb, 0x6a, 0x37, 0x86, 0xa7, 0x50, 0x66, 0xe7, 0x21, 0x5a, 0x33, 0x71,
	0x5c, 0xf2, 0x7b, 0x64, 0x3b, 0x5a, 0x34, 0xe6, 0x8e, 0xe8, 0x36, 0x94, 0x98, 0x11, 0x6b, 0xcb,
	0xcd, 0xd8, 0x6d, 0x29, 0x7c, 0x06, 0x05, 0xee, 0xc0, 0x7e, 0x9d, 0xd4, 0x05, 0x45, 0xf2, 0x9f,
	0x4d, 0x7f, 0xf4, 0xd9, 0xba, 0x23, 0xd2, 0xad, 0xb0, 0x29, 0x0f, 0x35, 0x66, 0xd9, 0xbe, 0xb9,
	0x19, 0xe0, 0xd9, 0x04, 0x07, 0x3b, 0x97, 0x74, 0xcc, 0xa0, 0x63, 0x77, 0x4f, 0x86, 0x67, 0xe2,
	0x01, 0x19, 0xb7, 0xf4, 0x8e, 0xc9, 0xe8, 0x0a, 0x38, 0xff, 0x3a, 0xd9, 0x02, 0xdf, 0x3e, 0xdc,
	0x74, 0x51, 0x12, 0x0f, 0x0f, 0xc9, 0x6d, 0x79, 0x7d, 0x05, 0x88, 0xbf, 0x1d, 0x96, 0x2f, 0x00,
	0xe7, 0xc3, 0xd4, 0xac, 0xbd, 0x27, 0xee, 0x8f, 0xeb, 0x1b, 0x00, 0xce, 0x74, 0xe1, 0x78, 0x53,
	0xb4, 0x6e, 0xb2, 0xf1, 0x30, 0x13, 0x6f, 0xb6, 0x7b, 0x70, 0x6a, 0x32, 0xb2, 0xd5, 0x3b, 0x4c,
	0x4b, 0xfd, 0x74, 0x72, 0x7d, 0x3c, 0x75, 0xe8, 0x6d, 0x38, 0x69, 0xd8, 0xfe, 0xac, 0x29, 0xec,
	0x9a, 0xec, 0xbf, 0xc1, 0xf6, 0xdd, 0xe6, 0x5d, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65,
	0x03, 0x61, 0x78, 0x67, 0x0c, 0x00, 0x00,
}
