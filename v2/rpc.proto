// This is the v2 transport protocol for NetAuth.  It encompases the
// lessons learned from v1, mainly that naming functions matters, and
// its very important to maintain conventions throughout an interface.
syntax = "proto2";
option go_package = "github.com/NetAuth/Protocol/v2";
import "NetAuth.proto";
package netauth.v2;

service NetAuth2 {
  rpc EntityCreate(EntityRequest) returns (Empty) {}
  rpc EntityUpdate(EntityRequest) returns (Empty) {}
  rpc EntityInfo(EntityRequest) returns (ListOfEntities) {}
  rpc EntitySearch(SearchRequest) returns (ListOfEntities) {}
  rpc EntityUM(KVRequest) returns (ListOfStrings) {}
  rpc EntityKeys(KVRequest) returns (ListOfStrings) {}
  rpc EntityDestroy(EntityRequest) returns (Empty) {}
  rpc EntityLock(EntityRequest) returns (Empty) {}
  rpc EntityUnlock(EntityRequest) returns (Empty) {}
  rpc EntityGroups(EntityRequest) returns (ListOfGroups) {}

  rpc AuthEntity(AuthRequest) returns (Empty) {}
  rpc AuthGetToken(AuthRequest) returns (AuthResult) {}
  rpc AuthValidateToken(AuthRequest) returns (Empty) {}
  rpc AuthChangeSecret(EntityRequest) returns (Empty) {}

  rpc GroupCreate(GroupRequest) returns (Empty) {}
  rpc GroupUpdate(GroupRequest) returns (Empty) {}
  rpc GroupInfo(GroupRequest) returns (ListOfGroups) {}
  rpc GroupUM(KVRequest) returns (ListOfStrings) {}
  rpc GroupUpdateRules(GroupRulesRequest) returns (Empty) {}
  rpc GroupAddMember(EntityRequest) returns (Empty) {}
  rpc GroupDelMember(EntityRequest) returns (Empty) {}
  rpc GroupDestroy(GroupRequest) returns (Empty) {}
  rpc GroupMembers(GroupRequest) returns (ListOfEntities) {}
  rpc GroupSearch(SearchRequest) returns (ListOfGroups) {}

  rpc SystemCapabilities(CapabilityRequest) returns (Empty) {}
  rpc SystemPing(Empty) returns (Empty) {}
  rpc SystemStatus(Empty) returns (ServerStatus) {}
}

enum Action {
  ADD = 1;
  DROP = 2;
  UPSERT = 3;
  CLEAREXACT = 4;
  CLEARFUZZY = 5;
  READ = 6;
}

enum RuleAction {
  INCLUDE = 1;
  EXCLUDE = 2;
  REMOVE_RULE = 99;
}

message EntityRequest {
  optional AuthData Auth = 1;
  optional Entity Entity = 2;
  optional Entity Data = 3;
  optional ClientInfo Info = 4;
}

message GroupRequest {
  optional AuthData Auth = 1;
  optional Group Group = 2;
  optional Group Data = 3;
  optional ClientInfo Info = 4;
}

message KVRequest {
  optional AuthData Auth = 1;
  optional string Target = 2;
  optional Action Action = 3;
  optional string Key = 4;
  optional string Value = 5;
  optional ClientInfo Info = 6;
}

message ListOfEntities {
  repeated Entity Entities = 1;
}

message ListOfGroups {
  repeated Group Groups = 1;
}

message ListOfStrings {
  repeated string Strings = 1;
}

message AuthRequest {
  optional Entity Entity = 1;
  optional string Secret = 2;
  optional string Token = 98;
  optional ClientInfo Info = 99;
}

message AuthResult {
  optional string Token = 1;
}

message AuthData {
  optional string Token = 1;
}

message SubSystemStatus {
  optional string Name = 1;
  optional bool OK = 2;
  optional string FaultMessage = 3;
}

message ServerStatus {
  optional bool SystemOK = 1;
  optional SubSystemStatus FirstFailure = 2;
  repeated SubSystemStatus SubSystems = 3;
}

message CapabilityRequest {
  optional AuthData Auth = 1;
  optional Capability Capability = 2;
  optional bool Direct = 3;
  optional string Target = 4;
  optional Action Action = 5;
  optional ClientInfo Info = 6;
}

message GroupRulesRequest {
  optional AuthData Auth = 1;
  optional Group Group = 2;
  optional Group Target = 3;
  optional RuleAction RuleAction = 5;
  optional ClientInfo Info = 6;
}

// Some RPC commands return no result, instead the only return
// information required is the status code which is returned in a
// parallel channel via gRPC magic.  This message serves that function
// by being explicitly empty.
message Empty {}

// The ClientInfo message contains information about the client
// originating the request.  This information must not be used for
// security functions of any kind, as it is directly editable by the
// client.
message ClientInfo {
  // The ID is to be used to define the originating client, this
  // should in general be set to the client's hostname, or otherwise
  // some persistent system identifier.
  optional string ID = 1;

  // The Service is an identifier that defined what is asking the
  // system for information.  This should usually be set to the
  // application name, or 'SYSTEM' if the request is on behalf of the
  // system itself.
  optional string Service = 2;
}

// A SearchRequest contains a search expression, and the standard
// client info struct.
message SearchRequest {
  optional string expression = 1;
  optional ClientInfo Info = 2;
}
